Given head, the head of a singly linked list, find if the linked list is circular or not. A linked list is called circular if it not NULL terminated and all nodes are connected in the form of a cycle. An empty linked list is considered as circular.

Note: The linked list does not contains any inner loop.

Example 1:

Input:
LinkedList: 1->2->3->4->5
(the first and last node is connected,
i.e. 5 --> 1)
Output: 1
Example 2:

Input:
LinkedList: 2->4->6->7->5->1
Output: 0
Your Task:
The task is to complete the function isCircular() which checks if the given linked list is circular or not. It should return true or false accordingly. (the driver code prints 1 if the returned values is true, otherwise 0)

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        l=[]
        lst=[]
        c=0
        if l1:
            cu=l1
            while(cu):
                l.append(cu.val)
                cu=cu.next
        if l2:
            cur=l2
            while(cur):
                lst.append(cur.val)
                cur=cur.next
        l.reverse()
        lst.reverse()
        a=''.join(map(str,l))
        b=''.join(map(str,lst))
        c=int(a)+int(b)
        d=str(c)
        m=d[::-1]
        ahead=ans=ListNode()
        for i in range(len(m)):
            ans.next=ListNode()
            ans.next.val=m[i]
            ans=ans.next
        return ahead.next
 
